(def t 't)

(def nil ())

(def y (lam (f) ((lam (x) (f (x x)))
                     (lam (x) (f (x x))))))

(def list (lam x x))
(def id (lam (x) x))

(macro rec1 (lam (v e) (list (quotation y) (list 'lam (list v) e))))

(def deflam-maker (lam (name args body)
                       (cons 'def (cons name (cons (cons 'lam (cons args (cons body ()))) ())))))

(macro deflam deflam-maker)

(deflam <= (x y) (if (eqc x y) 't (< x y)))

(deflam latin-upper-p (c) (if (<= (cf '"A") c) (<= c (cf '"Z")) nil))
(deflam latin-lower-p (c) (if (<= (cf '"a") c) (<= c (cf '"z")) nil))

(def map
     (letrec (map (lam (f xs) (if xs (cons (f (cf xs)) (map f (cs xs))) ()))) map))
